#!/bin/bash

# 1. Disable swap:
sudo swapoff -a
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

# 2. Setup ipv4 bridge on all nodes
# Create config file for modules
sudo tee /etc/modules-load.d/containerd.conf <<EOF
overlay
br_netfilter
EOF

# 3. Load modules
sudo modprobe overlay
sudo modprobe br_netfilter

# 4.Create another config file for sysctl Так как большинство сетевых плагинов (CNI) в Kubernetes используют встроенный в ядро Linux firewall под названием Iptables, а также маршрутизируют трафик через сетевой мост (bridge), нам необходимо активировать соответствующие сетевые параметры, которые отвечают за маршрутизацию трафика через сетевой мост. Для этого выполняем команду
sudo tee /etc/sysctl.d/kubernetes.conf <<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF

# 5. Apply sysctl parameters
sudo sysctl --system

# 6. Update apt source list
sudo apt update

# 7. Install containerd
sudo apt install containerd -y

# 8. Install Docker
sudo apt update && echo "Обновили индексы пакетов apt" \
&& sudo apt install curl software-properties-common ca-certificates apt-transport-https -y \
&& echo "Установили дополнительные пакеты" \
&& wget -O- https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor | sudo tee /etc/apt/keyrings/docker.gpg > /dev/null \
&& echo "импортировали GPG-Ключ" \
&& echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu jammy stable"| sudo tee /etc/apt/sources.list.d/docker.list > /dev/null \
&& echo "Добавили репозиторий Докера" \
&& sudo apt update && echo "Еще раз обновили индексы пакетов"\
&& apt-cache policy docker-ce && echo "Проверили из какого репозитория будет выполнятся установка Докера" \
&& sudo apt install docker-ce -y && echo "Установили Докер" \
&& sudo docker -v && echo "Проверили версию Докера в системе"

# 9. Configure containerd for the cgroup driver used by kubeadm (systemd)
sudo mkdir -p /etc/containerd
sudo containerd config default | sudo tee /etc/containerd/config.toml
sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml

# 10. Restart and enable containerd
sudo systemctl restart containerd
sudo systemctl enable containerd

# 11. Install helper tools
sudo apt install -y apt-transport-https ca-certificates curl gpg

# 11. Download the public signing key for the Kubernetes package repositories
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

# 12. Add the Kubernetes apt repository for v1.31
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

# 13. Update apt source list, install kubelet, kubeadm and kubectl and hold them at the current version
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

# 14. Автодополнение kubectl и добавление alias ls -la
source <(kubectl completion bash)
echo "source <(kubectl completion bash)" >> ~/.bashrc
echo "alias ll='ls -la'" >> ~/.bashrc

# 15. Настрйоки Мастера, если предали скрипту параметр master

if [ "$1" == "master" ]; then

# 16. Initialize the cluster
sudo kubeadm init --pod-network-cidr=10.244.0.0/16

# 17. Copy the kubeconfig file to the user's home directory and change the ownership
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# 18. Untaint node
kubectl taint node master node-role.kubernetes.io/control-plane:NoSchedule-

# 19. Deploying Flannel with kubectl
kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml

fi
